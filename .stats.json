{"lines": {"blank": 190, "comment": 10, "docstring": 325, "code": 574}, "pep8": {"count": 85, "categories": [["1", "E122", "continuation line missing indentation or outdented"], ["1", "E128", "continuation line under-indented for visual indent"], ["1", "E129", "visually indented line with same indent as next logical line"], ["1", "E131", "continuation line unaligned for hanging indent"], ["7", "E201", "whitespace after '{'"], ["6", "E202", "whitespace before '}'"], ["1", "E203", "whitespace before ':'"], ["2", "E231", "missing whitespace after ','"], ["48", "E251", "unexpected spaces around keyword / parameter equals"], ["3", "E302", "expected 2 blank lines, found 1"], ["1", "E501", "line too long (81 > 79 characters)"], ["2", "E701", "multiple statements on one line (colon)"], ["4", "E722", "do not use bare 'except'"], ["6", "W291", "trailing whitespace"], ["1", "W391", "blank line at end of file"]]}, "doc": {"classes": {"RunContext": ["test.py", 31, "Context for encapsulating an executable call"]}, "functions": {"git": ["hooks.py", 45, "System git call"], "setup_package": ["setup.py", 164, "Wrapper of the distutils.setup function, for GRAND packages"]}, "modules": {"hooks": ["hooks.py", 0, "Git hooks providing local CI", {"classes": {}, "functions": {"add_banner": ["hooks.py", 269, "Add a banner to git commit messages"], "analyse_package": ["hooks.py", 181, "Analyse the content of a package and dump statistics"], "check_style": ["hooks.py", 120, "Check the conformity to PEP8"], "count_lines": ["hooks.py", 98, "Count the number of Python code lines, recursively"], "count_lines_in": ["hooks.py", 57, "Count the number of code lines in a Python file"], "gather_doc": ["hooks.py", 131, "Gather public objects and their associated docstrings"], "get_alts": ["setup.py", 82, "Get alternative names for the package"], "get_top_directory": ["hooks.py", 51, "Get the package top directory from git"], "git": ["hooks.py", 45, "System git call"], "pre_commit": ["hooks.py", 285, "Git hook for pre-processing a commit"], "prepare_commit_msg": ["hooks.py", 309, "Git hook for preparing the commit message"], "update_readme": ["hooks.py", 199, "Update the package README"]}, "modules": {}}], "setup": ["setup.py", 0, "Encapsulation of setuptools for GRAND", {"classes": {"DistClean": ["setup.py", 117, "Custom clean command, to really clean the repo"]}, "functions": {"get_alts": ["setup.py", 82, "Get alternative names for the package"], "make_version_module": ["setup.py", 55, "Build the version.py module for the distribution"], "parse_readme": ["setup.py", 92, "Parse some meta data from the README.md"], "setup_package": ["setup.py", 164, "Wrapper of the distutils.setup function, for GRAND packages"]}, "modules": {}}], "test": ["test.py", 0, "Encapsulation of setuptools for GRAND", {"classes": {"RunContext": ["test.py", 31, "Context for encapsulating an executable call"]}, "functions": {}, "modules": {}}]}}}