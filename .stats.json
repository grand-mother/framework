{"lines": {"blank": 210, "comment": 9, "docstring": 328, "code": 682}, "pep8": {"count": 86, "categories": [["1", "E122", "continuation line missing indentation or outdented"], ["2", "E125", "continuation line with same indent as next logical line"], ["1", "E128", "continuation line under-indented for visual indent"], ["1", "E131", "continuation line unaligned for hanging indent"], ["7", "E201", "whitespace after '{'"], ["6", "E202", "whitespace before '}'"], ["1", "E203", "whitespace before ':'"], ["1", "E231", "missing whitespace after ','"], ["48", "E251", "unexpected spaces around keyword / parameter equals"], ["1", "E302", "expected 2 blank lines, found 1"], ["1", "E303", "too many blank lines (2)"], ["1", "E306", "expected 1 blank line before a nested definition, found 0"], ["4", "E501", "line too long (80 > 79 characters)"], ["2", "E701", "multiple statements on one line (colon)"], ["5", "E722", "do not use bare 'except'"], ["4", "W291", "trailing whitespace"]]}, "doc": {"doc": "Common framework for GRAND packages", "classes": {"RunContext": [31, "Context for encapsulating an executable call", "framework/test.py"]}, "definitions": {}, "functions": {"setup_package": [164, "Wrapper of the distutils.setup function, for GRAND packages", "framework/setup.py"], "git": [46, "System git call", "framework/hooks.py"]}, "imports": {"1": {"setup": [["*", "*"]], "test": [["*", "*"]], "hooks": [["git", "git"]]}}, "path": "framework/__init__.py", "__all__": ["__version__", "__githash__", "git", "RunContext", "setup_package"], "modules": {"setup": {"doc": "Encapsulation of setuptools for GRAND", "classes": {"DistClean": [117, "Custom clean command, to really clean the repo"]}, "definitions": {"DEFAULT_CLASSIFIERS": [41, ""]}, "functions": {"make_version_module": [55, "Build the version.py module for the distribution"], "get_alts": [82, "Get alternative names for the package"], "parse_readme": [92, "Parse some meta data from the README.md"], "setup_package": [164, "Wrapper of the distutils.setup function, for GRAND packages"]}, "imports": {}, "path": "framework/setup.py", "__all__": ["setup_package"]}, "hooks": {"doc": "Git hooks providing local CI", "classes": {}, "definitions": {}, "functions": {"git": [46, "System git call"], "get_top_directory": [52, "Get the package top directory from git"], "count_lines_in": [58, "Count the number of code lines in a Python file"], "count_lines": [99, "Count the number of Python code lines, recursively"], "check_style": [121, "Check the conformity to PEP8"], "gather_doc": [133, "Gather public objects and their associated docstrings"], "analyse_package": [314, "Analyse the content of a package and dump statistics"], "update_readme": [332, "Update the package README"], "add_banner": [402, "Add a banner to git commit messages"], "pre_commit": [418, "Git hook for pre-processing a commit"], "prepare_commit_msg": [442, "Git hook for preparing the commit message"]}, "imports": {}, "path": "framework/hooks.py", "__all__": ["pre_commit", "prepare_commit_msg"]}, "init": {"doc": "Initialiser for GRAND packages", "classes": {}, "definitions": {}, "functions": {"get_data_dir": [39, "Get the absolute path to the package data files"], "copy": [46, "Copy a file out of the data folder to a target directory"], "mkdir": [53, "Create directories recursively if they don't exist"], "write_coverage_config": [59, "Write a default config file for `coverage`"], "write_readme": [84, "Write a default README file"], "write_source": [130, "Write a default __init__.py file"], "write_setup": [169, "Write a default setup.py file for the base package"], "write_tests_init": [206, "Write a default __init__.py file for the tests package"], "write_tests_main": [220, "Write a default __main__.py file for the tests package"], "write_tests_version": [250, "Write a default test_version.py file for the tests package"], "add_git_hook": [291, "Add a hook for managing git workflow"], "main": [312, "Parse CLI arguments and initialise a local package"]}, "imports": {}, "path": "framework/init.py", "__all__": ["main"]}, "test": {"doc": "Utilities for unit tests", "classes": {"RunContext": [31, "Context for encapsulating an executable call"]}, "definitions": {}, "functions": {}, "imports": {}, "path": "framework/test.py", "__all__": ["RunContext"]}}}}